= render :partial => "nav"

.api
  %h2 API

  %p
    Raid.it supports single-sign-in integration through a very simple RESTful API. 

  %p
    Your current API key is: 
    .api_key
      = @guild.api_key

  %p
    The single-sign-in system is two fold. First you need to get a one-time use Sign In Token
    from your Raid.it account using your API key above. To ensure this key is not passed around
    where anyone can see it, you have to build your request a certain way. The API key itself
    is never passed in the query but is instead used to build a signature of the request
    that Raid.it will validate before letting the request process.

  %p
    Building this request requires the following steps:

  %ol
    %li Given a hash of key-value pairs that will be your query parameters.
    %li Sort the parameters into a list by key alphabetially
    %li Concatenate all keys and values into a single string with no delimiters
    %li Add your API key to the end of the string
    %li MD5 hash the resulting string
    %li Append signature=[hash] to your query hash and send the request.

  %p Here's a pseudo-code example

  :preserve
    <pre>1) 
    query_params = {"email" => "wowuser@guild.com", "create" => "true"}

    2)
    query_list = ["email", "wowuser@guild.com", "create", "true"]

    3)
    query_string = "emailwowuser@guild.comcreatetrue"

    4)
    query_string = "emailwowuser@guild.comcreatetrueSECRETAPIKEY"

    5)
    hashed_string = MD5(query_string)

    6)
    query_params["signature"] = hashed_string
    </pre>
      

  %p
    With this knowledge you are now ready to query for login tokens.

  %p
    The request for a login token is simple:

  :preserve
    <pre>GET /api/token?email=[user's email]&create={true,false}&signature=[signature]</pre>

  %p
    The email and signature params are required. The create param tells Raid.it whether to create the user
    with the given email address if it doesn't already exist. If ommitted, Raid.it will default the parameter
    to false.

  %p
    All responses are in JSON format:

  :preserve
    <pre>Success:
      {status: "success", token: "[token]"}

    Failure:
      {status: "failure", reason: "[reason]"}
    </pre>

  %p
    On successful receipt of a sign-in token, to sign the user into Raid.it you simply have to redirect them to:

  :preserve
    <pre>http://www.raidit.org/?token=[token]</pre>

  %p
    You can put the token paramter on any request if you want to sign the user into a page other than the Calendar page.

